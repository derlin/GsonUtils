<project name="GsonSimple-old" default="jar-all" basedir=".">
    <description>
        simple gson utility classes to serialise/deserialise json files
    </description>

    <!-- set global properties for this build -->
    <property file="build.properties" />
    <property name="manifest.name" value="MANIFEST.mf" />

    <!--the classpath for external libs-->
    <path id="library.classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar" />
    </path>
    <!--match classes-->
    <patternset id="class.patterns">
        <include name="**/*.class" />
    </patternset>
    <!--match src-->
    <patternset id="src.patterns">
        <include name="**/*.java" />
    </patternset>

    <!-- ______________________________________________________ -->

    <!--
        initialisation
    -->
    <target name="init">
        <!-- Create the time stamp -->
        <tstamp>
            <format property="DSTAMP" pattern="dd-MM-yyyy" locale="fr,CH" />
        </tstamp>
        <mkdir dir="${classes.dir}" />
    </target>

    <target name="javadoc" depends="init">
        <mkdir dir="${build.dir}/javadoc"/>

        <javadoc
            sourcepath="${src.dir}"
            destdir="${build.dir}/javadoc"
            classpath="${src.dir}"
            author="true"
            version="true"
            use="true"
            windowtitle="${app.name} API"
            doctitle="&lt;h1&gt;${app.name}&lt;/h1&gt;"
            />

    </target>

    <!--
        write a custom manifest which can then be included with <jar ... manifest="${build.dir}/${manifest.name}"
    -->
    <target name="write-manifest" depends="">
        <manifest file="${build.dir}/${manifest.name}">
            <attribute name="Built-By" value="${author}"/>
            <attribute name="Description" value="${app.description}"/>
            <attribute name="RequiredExecutionEnvironment" value="${min-jdk}"/>
            <attribute name="Implementation-Version" value="${app.version} ${TODAY}"/>

        </manifest>
    </target>

    <!-- ______________________________________________________ -->

    <!--
        compile everything
    -->
    <target name="compile" depends="init" description="compile the source">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="library.classpath" />
        <!--copies the static resources to the class dir-->
        <copy todir="${classes.dir}/resources/">
            <fileset dir="${src.dir}/resources">
                <include name="*" />
            </fileset>
        </copy>

        <unjar dest="${classes.dir}">
            <patternset refid="class.patterns" />
            <fileset dir="${lib.dir}" includes="*.jar" />
        </unjar>
    </target>

    <!--
        compile everything and then copy sources to out dir
    -->
    <target name="compile-with-sources" depends="compile">
        <!--copy the sources into the class dir-->
        <copy todir="${dest.src.dir}">
            <fileset dir="${src.dir}" includes="**/**" />
        </copy>
    </target>

    <!-- ______________________________________________________ -->

    <!--
        create a jar with classes + sources
    -->
    <target name="jar-all" depends="compile-with-sources,write-manifest" description="generate the distribution with test files and all">
        <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
        <manifest file="${build.dir}/${manifest.name}" mode="update">
            <attribute name="Main-Class" value="${main-class}" />
        </manifest>
        <jar jarfile="${jar.name.all}-${DSTAMP}.jar" manifest="${build.dir}/${manifest.name}"  update="false">
            <fileset dir="${classes.dir}" includes="**" />
        </jar>
        <delete dir="${build.dir}" />
    </target>

    <!--
        create a jar with classes only
    -->
    <target name="jar-release" depends="compile,write-manifest" description="generate the distribution with test files and all">
        <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->

        <jar jarfile="${jar.name.release}-${DSTAMP}.jar" update="false" manifest="${build.dir}/${manifest.name}">
            <fileset dir="${classes.dir}" includes="**" />
        </jar>
    </target>


    <!--
        clean up: delete build directory
    -->
    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <!--
        clean up: delete build directory + jars
    -->
    <target name="clean-all" description="clean all: build dir and jars" depends="clean">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build.dir}" />
        <delete>
            <fileset dir="." includes="${app.name}*.jar" />
        </delete>
    </target>


    <target name="clean-build" depends="clean,jar-release"/>

    <target name="run-release" depends="jar-release">
        <java jar="${jar.name.release}-${DSTAMP}.jar" fork="true" />
    </target>

    <target name="run-all" depends="jar-all">
        <java jar="${jar.name.all}-${DSTAMP}.jar" fork="true" />
    </target>


    <!--little test to do something conditionally-->
    <target name="test-echo" if="include.src">
        <echo message="lala" />
        <echo message="${include.src}" />
    </target>

    <target name="test" depends="test-echo">
        <!--<property name="include.src" value="true" />-->
        <antcall target="test-echo">
            <!--<param name="include.src" value="false" />-->
        </antcall>
        <echo message="${description}" />
    </target>
</project>