<project name="GsonSimple" default="all" basedir=".">
    <description>
        simple gson utility classes to serialise/deserialise json files
    </description>

    <!-- set global properties for this build -->
    <property file="build.properties" />

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar" />
    </path>
    <patternset id="class.patterns">
        <include name="**/*.class"/>
    </patternset>

    <!--
        initialisation
    -->
    <target name="init">
        <!-- Create the time stamp -->
        <tstamp>
            <format property="DSTAMP" pattern="dd-MM-yyyy" locale="fr,CH"/>
        </tstamp>
        <!-- Create the build directory structure used by compile -->
    </target>

    <!--
        compile everything except examples directory
    -->
    <target name="compile" depends="init"
        description="compile the source " >
        <mkdir dir="${classes.dir}"/>
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"  />
        <copy todir="${classes.dir}/resources/">
            <fileset dir="${src.dir}/resources">
                <include name="**/*"/>
            </fileset>
        </copy>
        <!--copies the static resources (.json) to the class dir-->
    </target>

    <!--
        compile everything except examples directory and then copy sources to out dir
    -->
    <target name="compile-with-sources" depends="init, compile">
        <!--<mkdir dir="${build.dir}/src" />-->
        <copy todir="${dest.src.dir}">
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </copy>
        <!--copies the sources into the class dir-->
        <unjar dest="${dest.lib.dir}">
            <patternset refid="class.patterns"/>
            <fileset dir="${lib.dir}" includes="*.jar"/>
        </unjar>
        <copy todir="${dest.src.dir}/resources/">
            <fileset dir="${src.dir}/resources">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <!--
        create a jar with classes + sources
    -->
    <!--<target name="all" depends="compile-with-sources"-->
        <!--description="generate the distribution with test files and all" >-->
        <!--&lt;!&ndash; Put everything in ${build} into the MyProject-${DSTAMP}.jar file &ndash;&gt;-->
        <!--<jar jarfile="${jar.name.all}-${DSTAMP}.jar" basedir="${build.dir}">-->
            <!--<zipgroupfileset includes="*.jar" dir="${lib.dir}"/>-->
            <!--<manifest>-->
                <!--<attribute name="Main-Class" value="examples.ExampleConfigContainer"/>-->
            <!--</manifest>-->
        <!--</jar>-->
        <!--<delete dir="${build.dir}"/>-->
    <!--</target>-->
    <target name="all" depends="compile-with-sources"
        description="generate the distribution with test files and all" >
        <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
        <jar jarfile="${jar.name.all}-${DSTAMP}.jar" basedir="${build.dir}">
            <!--include everything in the class dir-->
            <fileset dir="${build.dir}" includes="**"/>
            <manifest>
                <attribute name="Class-Path" value="./classes/" />
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
        <delete dir="${build.dir}"/>
    </target>

    <!--
        create a jar with classes only
    -->
    <target name="release" depends="compile"
        description="generate the distribution with test files and all" >
        <!-- Create the distribution directory -->
        <!--<mkdir dir="${dist.dir}"/>-->

        <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
        <!--<jar jarfile="${dist.dir}/${app.name}-${app.version}.rt.${DSTAMP}.jar" basedir="${build.dir}" />-->
        <jar jarfile="${jar.name.release}-${DSTAMP}.jar" basedir="${build.dir}" >
            <zipgroupfileset includes="*.jar" dir="${lib.dir}" />
        </jar>
        <echo >${jar.name.release}</echo>
        <delete dir="${build.dir}"/>
    </target>


    <!--
        clean up: delete build directories
    -->
    <target name="clean"
        description="clean up" >
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete>
            <fileset dir="." includes="${app.name}*.jar" />
        </delete>
    </target>

    <target name="run" depends="release">
        <java jar="${jar.name}" fork="true"/>
    </target>
</project>